// <auto-generated />
using System;
using Ihjezly.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ihjezly.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251010172050_ReviewsCorrectForBookingFixBooking")]
    partial class ReviewsCorrectForBookingFixBooking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ihjezly.Domain.Booking.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("Ihjezly.Domain.NewFolder.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Ihjezly.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Facilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAd")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Unavailbles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOwnerId");

                    b.ToTable("Properties");

                    b.HasDiscriminator().HasValue("Property");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.SelectableLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SelectableLocations");
                });

            modelBuilder.Entity("Ihjezly.Domain.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Ihjezly.Domain.SavedProperties.SavedProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedProperties", (string)null);
                });

            modelBuilder.Entity("Ihjezly.Domain.Subscriptions.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxAds")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsedAds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOwnerId");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Ihjezly.Domain.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Ihjezly.Domain.Users.EmailVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmailVerificationCodes", (string)null);
                });

            modelBuilder.Entity("Ihjezly.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("ViolationCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ihjezly.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxAds")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("EventHallSmall", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("EventHallSmall");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Apartment", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("Apartment");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Chalet", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("Chalet");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.EventHallLarge", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("EventHallLarge");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.HotelApartment", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("HotelApartment");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.HotelRoom", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("HotelRoom");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.MeetingRoom", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("MeetingRoom");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Resort", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("Resort");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.RestHouse", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("RestHouse");
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.VillaEvent", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Properties.Property");

                    b.HasDiscriminator().HasValue("VillaEvent");
                });

            modelBuilder.Entity("Admin", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Users.User");

                    b.HasIndex("PhoneNumber");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("BusinessOwner", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Users.User");

                    b.HasIndex("PhoneNumber");

                    b.HasDiscriminator().HasValue("BusinessOwner");
                });

            modelBuilder.Entity("Ihjezly.Domain.Users.Client", b =>
                {
                    b.HasBaseType("Ihjezly.Domain.Users.User");

                    b.HasIndex("PhoneNumber");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Ihjezly.Domain.Booking.Booking", b =>
                {
                    b.HasOne("Ihjezly.Domain.Users.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ihjezly.Domain.Properties.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice_Amount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalPrice_Currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("Bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId");
                        });

                    b.Navigation("TotalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.NewFolder.Report", b =>
                {
                    b.HasOne("Ihjezly.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ihjezly.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Ihjezly.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Property", b =>
                {
                    b.HasOne("BusinessOwner", null)
                        .WithMany()
                        .HasForeignKey("BusinessOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Ihjezly.Domain.Properties.Discount", "Discount", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DiscountPercentage");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.OwnsMany("Ihjezly.Domain.Shared.Image", "Images", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("ImageUrl");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("bit");

                            b1.HasKey("PropertyId", "Url");

                            b1.ToTable("PropertyImages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.OwnsOne("Ihjezly.Domain.Shared.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.OwnsOne("Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price_Amount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("LYD")
                                .HasColumnName("Price_Currency");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.OwnsOne("Ihjezly.Domain.Properties.ViedeoUrl", "ViedeoUrl", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ViedeoUrl");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.Navigation("Discount");

                    b.Navigation("Images");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("ViedeoUrl");
                });

            modelBuilder.Entity("Ihjezly.Domain.Reviews.Review", b =>
                {
                    b.HasOne("Ihjezly.Domain.Properties.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ihjezly.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.SavedProperties.SavedProperty", b =>
                {
                    b.HasOne("Ihjezly.Domain.Properties.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ihjezly.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Subscriptions.Subscription", b =>
                {
                    b.HasOne("BusinessOwner", null)
                        .WithMany()
                        .HasForeignKey("BusinessOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubscriptionPlan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SubscriptionPrice_Amount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("SubscriptionPrice_Currency");

                            b1.HasKey("SubscriptionId");

                            b1.ToTable("Subscriptions");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("Wallet", null)
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Users.User", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Shared.Image", "UserProfilePicture", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("bit");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("UserProfilePicture")
                        .IsRequired();
                });

            modelBuilder.Entity("SubscriptionPlan", b =>
                {
                    b.OwnsOne("Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PlanPrice_Amount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("PlanPrice_Currency");

                            b1.HasKey("PlanId");

                            b1.ToTable("SubscriptionPlans");

                            b1.WithOwner()
                                .HasForeignKey("PlanId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Wallet", b =>
                {
                    b.HasOne("Ihjezly.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Money", "Balance", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Balance_Amount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Balance_Currency");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallets");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();
                });

            modelBuilder.Entity("EventHallSmall", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.EventHallSmallDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("EventHallSmallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Features")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Features");

                            b1.Property<int>("NumberOfGuests")
                                .HasColumnType("int");

                            b1.HasKey("EventHallSmallId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfGuests")
                                        .HasColumnName("EventHallSmallDetails_Details_NumberOfGuests");
                                });

                            b1.WithOwner()
                                .HasForeignKey("EventHallSmallId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Apartment", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.ApartmentDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("ApartmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("NumberOfAdults")
                                .HasColumnType("int");

                            b1.Property<int>("NumberOfChildren")
                                .HasColumnType("int");

                            b1.Property<string>("apartmentType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Chalet", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.ChaletDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("ChaletId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("NumberOfAdults")
                                .HasColumnType("int");

                            b1.Property<int>("NumberOfChildren")
                                .HasColumnType("int");

                            b1.HasKey("ChaletId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfAdults")
                                        .HasColumnName("ChaletDetails_Details_NumberOfAdults");

                                    t.Property("NumberOfChildren")
                                        .HasColumnName("ChaletDetails_Details_NumberOfChildren");
                                });

                            b1.WithOwner()
                                .HasForeignKey("ChaletId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.EventHallLarge", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.EventHallLargeDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("EventHallLargeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Features")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Features");

                            b1.Property<int>("NumberOfGuests")
                                .HasColumnType("int");

                            b1.HasKey("EventHallLargeId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("EventHallLargeId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.HotelApartment", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.HotelApartmentDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("HotelApartmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("NumberOfAdults")
                                .HasColumnType("int");

                            b1.Property<int>("NumberOfChildren")
                                .HasColumnType("int");

                            b1.Property<string>("hotalApartmentType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HotelApartmentId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfAdults")
                                        .HasColumnName("HotelApartmentDetails_Details_NumberOfAdults");

                                    t.Property("NumberOfChildren")
                                        .HasColumnName("HotelApartmentDetails_Details_NumberOfChildren");
                                });

                            b1.WithOwner()
                                .HasForeignKey("HotelApartmentId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.HotelRoom", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.HotelRoomDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("HotelRoomId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("NumberOfAdults")
                                .HasColumnType("int");

                            b1.Property<int>("NumberOfChildren")
                                .HasColumnType("int");

                            b1.Property<string>("clasification")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Clasification");

                            b1.Property<string>("hotelRoomType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RoomType");

                            b1.HasKey("HotelRoomId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfAdults")
                                        .HasColumnName("HotelRoomDetails_Details_NumberOfAdults");

                                    t.Property("NumberOfChildren")
                                        .HasColumnName("HotelRoomDetails_Details_NumberOfChildren");
                                });

                            b1.WithOwner()
                                .HasForeignKey("HotelRoomId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.MeetingRoom", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.MeetingRoomDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("MeetingRoomId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Features")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Features");

                            b1.Property<int>("NumberOfGuests")
                                .HasColumnType("int");

                            b1.HasKey("MeetingRoomId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfGuests")
                                        .HasColumnName("MeetingRoomDetails_Details_NumberOfGuests");
                                });

                            b1.WithOwner()
                                .HasForeignKey("MeetingRoomId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.Resort", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.ResortDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("ResortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("NumberOfAdults")
                                .HasColumnType("int");

                            b1.Property<int>("NumberOfChildren")
                                .HasColumnType("int");

                            b1.Property<string>("clasification")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("type")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("ResortId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfAdults")
                                        .HasColumnName("ResortDetails_Details_NumberOfAdults");

                                    t.Property("NumberOfChildren")
                                        .HasColumnName("ResortDetails_Details_NumberOfChildren");
                                });

                            b1.WithOwner()
                                .HasForeignKey("ResortId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.RestHouse", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.RestHouseDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("RestHouseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("NumberOfAdults")
                                .HasColumnType("int");

                            b1.Property<int>("NumberOfChildren")
                                .HasColumnType("int");

                            b1.HasKey("RestHouseId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfAdults")
                                        .HasColumnName("RestHouseDetails_Details_NumberOfAdults");

                                    t.Property("NumberOfChildren")
                                        .HasColumnName("RestHouseDetails_Details_NumberOfChildren");
                                });

                            b1.WithOwner()
                                .HasForeignKey("RestHouseId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Ihjezly.Domain.Properties.VillaEvent", b =>
                {
                    b.OwnsOne("Ihjezly.Domain.Properties.VillaEventDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("VillaEventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Features")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("NumberOfGuests")
                                .HasColumnType("int");

                            b1.HasKey("VillaEventId");

                            b1.ToTable("Properties", t =>
                                {
                                    t.Property("NumberOfGuests")
                                        .HasColumnName("VillaEventDetails_Details_NumberOfGuests");
                                });

                            b1.WithOwner()
                                .HasForeignKey("VillaEventId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
